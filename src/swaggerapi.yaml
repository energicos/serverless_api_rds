
swagger: "2.0"
info:
  version: 1.0.0
  title: Contact Manager - API
  description: >
    This API is intented to enable external users to get information about the Contact
    Manager System that contains detailed information about contacts

# Specifies a request validator, by referencing a request_validator_name
x-amazon-apigateway-request-validators:
  basic:
    validateRequestBody: true
    validateRequestParameters: true
  params-only:
    validateRequestBody: false
    validateRequestParameters: true
x-amazon-apigateway-request-validator: basic

# Specifies the source to receive an API key
x-amazon-apigateway-api-key-source: HEADER

# list of binary media types to be supported by API Gateway
x-amazon-apigateway-binary-media-types:
  - application/json
  - application/xml
  - text/plain; charset=utf-8
  - text/html
  - application/pdf
  - image/png
  - image/gif
  - image/jpeg

securityDefinitions:
  enc-authorizer:
    type: apiKey # Required and the value must be "apiKey" for an API Gateway API.
    name: Authorization # The name of the header containing the authorization token
    in: header # Required and the value must be "header" for an API Gateway API.
    x-amazon-apigateway-authtype: cognito_user_pools # Specifies the authorization mechanism for the client.
    x-amazon-apigateway-authorizer: # An API Gateway Lambda authorizer definition
      type: cognito_user_pools # Required property and the value must "token"
      providerARNs:
      #This works fine
      - Fn::ImportValue: { "Fn::Sub" : "${EnvironmentName}-${Project}-UserPoolARN" }

schemes: [http, https]

# Tags for EBS Contact Manager API
tags:
  - name: "activities"
    description: "Refers to a activity"
  - name: "addresses"
    description: "Refers to a address"
  - name: "apartmentprofiles"
    description: "Refers to the apartment profiles"
  - name: "apartments"
    description: "Refers to the apartments"
  - name: "attachment"
    description: "Refers to a attachment"
  - name: "bankaccounts"
    description: "Refers to the bank account data of a contact"
  - name: "bankdetails"
    description: "Refers to the bank details data of a contact"
  - name: "bookmarks"
    description: "Refers to a bookmark"
  - name: "buildingnetworks"
    description: "Refers to the network of a building, which are contacts, pods, organizations"
  - name: "buildings"
    description: "Refers to the buildings"
  - name: "categories"
    description: "Refers to a category"
  - name: "comments"
    description: "Refers to the comment"
  - name: "contactnetworks"
    description: "Refers to the network of a contact, which are always other contacts"
  - name: "contacts"
    description: "Refers to all contacts and their details"
  - name: "contracts"
    description: "Refers to a contract"
  - name: "creditcards"
    description: "Refers to the credit card data of a contact"
  - name: "energymeters"
  - name: "entrances"
    description: "Refers to an entrance"
  - name: "favorites"
    description: "Refers to a favorite"
  - name: "financialprofiles"
    description: "Refers to the financial data of a contact"
  - name: "groups"
    description: "Refers to a user group"
  - name: "historicenergyconsumptions"
  - name: "organizationidentifiers"
    description: "Refers to an organization identifier"
  - name: "organizations"
    description: "Refers to an organization"
  - name: "pointofdeliverynetworks"
    description: "Refers to a point of delivery network record"
  - name: "pointsofdelivery"
    description: "Refers to a point of delivery"
  - name: "roles"
    description: "Refers to a user role"
  - name: "rooms"
    description: "Refers to a room"
  - name: "sepastandingorders"
    description: "Refers to the sepa standing order data of a contact"
  - name: "status"
    description: "Refers to a status"
  - name: "tags"
    description: "Refers to a tag"
  - name: "tasks"
    description: "Refers to a task"
  - name: "userprofiles"
    description: "Refers to the user profiles of a contact"

consumes:
  - application/json
  - application/xml
  - text/plain; charset=utf-8
  - text/html
  - application/pdf
produces:
  - application/json
  - application/xml
  - image/png
  - image/gif
  - image/jpeg

paths:
  /activities:
    x-swagger-router-controller: activities
    get:
      summary: "Retrieves a list of all activities"
      description: "Retrieves a list of all activities"
      operationId: "listActivities"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Activity"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new activity"
      description: "Creates a new activity"
      operationId: "createActivity"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "activity"
        schema:
          $ref: "#/definitions/Activity"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update activity by {id}"
      description: "Update activity by {id}"
      operationId: "updateActivityByID"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "activity"
        schema:
          $ref: "#/definitions/Activity"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /activities/{id}:
    x-swagger-router-controller: activities
    delete:
      summary: "Deletes an existing activity"
      description: "Deletes an existing activity"
      operationId: "deleteActivityByID"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find activity by {id}"
      description: "Find activity by {id}"
      operationId: "getActivityByID"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Activity"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /activities/{id}/copy:
    x-swagger-router-controller: activities
    post:
      summary: "Copy an existing activity"
      description: "Copy an existing activity"
      operationId: "copyActivityByID"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "activity"
        schema:
          $ref: "#/definitions/Activity"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /activities/{id}/lock:
    x-swagger-router-controller: activities
    delete:
      summary: "Unlock an existing activity"
      description: "Unlock an existing activity"
      operationId: "unlockActivityByID"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "activity"
        schema:
          $ref: "#/definitions/Activity"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing activity"
      description: "Lock an existing activity"
      operationId: "lockActivityByID"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "activity"
        schema:
          $ref: "#/definitions/Activity"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /activities/{id}/print:
    x-swagger-router-controller: activities
    post:
      summary: "Print an existing activity"
      description: "Print an existing activity"
      operationId: "printActivityByID"
      tags:
      - "activities"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "activity"
        schema:
          $ref: "#/definitions/Activity"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /addresses:
    x-swagger-router-controller: addresses
    get:
      summary: "Retrieves a list of all addresses"
      description: "Retrieves a list of all addresses"
      operationId: "listAddresses"
      tags:
      - "addresses"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Address"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new address"
      description: "Creates a new address"
      operationId: "createAddress"
      tags:
      - "addresses"
      parameters:
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update address by {id}"
      description: "Update address by {id}"
      operationId: "updateAddressByID"
      tags:
      - "addresses"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /addresses/{id}:
    x-swagger-router-controller: addresses
    delete:
      summary: "Deletes an existing address"
      description: "Deletes an existing address"
      operationId: "deleteAddressByID"
      tags:
      - "addresses"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find address by {id}"
      description: "Find address by {id}"
      operationId: "getAddressByID"
      tags:
      - "addresses"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Address"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /addresses/{id}/copy:
    x-swagger-router-controller: addresses
    post:
      summary: "Copy an existing address"
      description: "Copy an existing address"
      operationId: "copyAddressByID"
      tags:
      - "addresses"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /addresses/{id}/lock:
    x-swagger-router-controller: addresses
    delete:
      summary: "Unlock an existing address"
      description: "Unlock an existing address"
      operationId: "unlockAddressByID"
      tags:
      - "addresses"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing address"
      description: "Lock an existing address"
      operationId: "lockAddressByID"
      tags:
      - "addresses"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /addresses/{id}/print:
    x-swagger-router-controller: addresses
    post:
      summary: "Print an existing address"
      description: "Print an existing address"
      operationId: "printAddressByID"
      tags:
      - "addresses"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "address"
        schema:
          $ref: "#/definitions/Address"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartmentprofiles:
    x-swagger-router-controller: apartmentprofiles
    get:
      summary: "Retrieves a list of all apartmentprofiles"
      description: "Retrieves a list of all apartmentprofiles"
      operationId: "listApartmentProfiles"
      tags:
      - "apartmentprofiles"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Apartment_profile"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new apartmentprofiles"
      description: "Creates a new apartmentprofiles"
      operationId: "createApartmentProfile"
      tags:
      - "apartmentprofiles"
      parameters:
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update apartmentprofiles by {id}"
      description: "Update apartmentprofiles by {id}"
      operationId: "updateApartmentProfileByID"
      tags:
      - "apartmentprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartmentprofiles/{id}:
    x-swagger-router-controller: apartmentprofiles
    delete:
      summary: "Deletes an existing apartmentprofiles"
      description: "Deletes an existing apartmentprofiles"
      operationId: "deleteApartmentProfileByID"
      tags:
      - "apartmentprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find apartmentprofiles by {id}"
      description: "Find apartmentprofiles by {id}"
      operationId: "getApartmentProfileByID"
      tags:
      - "apartmentprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Apartment_profile"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartmentprofiles/{id}/copy:
    x-swagger-router-controller: apartmentprofiles
    post:
      summary: "Copy an existing apartmentprofiles"
      description: "Copy an existing apartmentprofiles"
      operationId: "copyApartmentProfileByID"
      tags:
      - "apartmentprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartmentprofiles/{id}/lock:
    x-swagger-router-controller: apartmentprofiles
    delete:
      summary: "Unlock an existing apartmentprofiles"
      description: "Unlock an existing apartmentprofiles"
      operationId: "unlockApartmentProfileByID"
      tags:
      - "apartmentprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing apartmentprofiles"
      description: "Lock an existing apartmentprofiles"
      operationId: "lockApartmentProfileByID"
      tags:
      - "apartmentprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartmentprofiles/{id}/print:
    x-swagger-router-controller: apartmentprofiles
    post:
      summary: "Print an existing apartmentprofiles"
      description: "Print an existing apartmentprofiles"
      operationId: "printApartmentProfileByID"
      tags:
      - "apartmentprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment_profile"
        schema:
          $ref: "#/definitions/Apartment_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartments:
    x-swagger-router-controller: apartments
    get:
      summary: "Retrieves a list of all apartments"
      description: "Retrieves a list of all apartments"
      operationId: "listApartments"
      tags:
      - "apartments"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Apartment"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new apartment"
      description: "Creates a new apartments"
      operationId: "createApartment"
      tags:
      - "apartments"
      parameters:
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update apartment by {id}"
      description: "Update apartment by {id}"
      operationId: "updateApartmentByID"
      tags:
      - "apartments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartments/{id}:
    x-swagger-router-controller: apartments
    delete:
      summary: "Deletes an existing apartment"
      description: "Deletes an existing apartment"
      operationId: "deleteApartmentByID"
      tags:
      - "apartments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find apartment by {id}"
      description: "Find apartment by {id}"
      operationId: "getApartmentByID"
      tags:
      - "apartments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Apartment"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartments/{id}/copy:
    x-swagger-router-controller: apartments
    post:
      summary: "Copy an existing apartment"
      description: "Copy an existing apartment"
      operationId: "copyApartmentByID"
      tags:
      - "apartments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartments/{id}/lock:
    x-swagger-router-controller: apartments
    delete:
      summary: "Unlock an existing apartments"
      description: "Unlock an existing apartments"
      operationId: "unlockApartmentByID"
      tags:
      - "apartments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing apartment"
      description: "Lock an existing apartment"
      operationId: "lockApartmentByID"
      tags:
      - "apartments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /apartments/{id}/print:
    x-swagger-router-controller: apartments
    post:
      summary: "Print an existing apartment"
      description: "Print an existing apartment"
      operationId: "printApartmentsByID"
      tags:
      - "apartments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "apartment"
        schema:
          $ref: "#/definitions/Apartment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /attachments:
    x-swagger-router-controller: attachments
    get:
      summary: "Retrieves a list of all attachments"
      description: "Retrieves a list of all attachments"
      operationId: "listAttachments"
      tags:
      - "attachment"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Attachment"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new attachment"
      description: "Creates a new attachment"
      operationId: "createAttachment"
      tags:
      - "attachment"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update attachment by {id}"
      description: "Update attachment by {id}"
      operationId: "updateAttachmentByID"
      tags:
      - "attachment"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /attachments/{id}:
    x-swagger-router-controller: attachments
    delete:
      summary: "Deletes an existing attachment"
      description: "Deletes an existing attachment"
      operationId: "deleteAttachmentByID"
      tags:
      - "attachment"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find attachment by {id}"
      description: "Find attachment by {id}"
      operationId: "getAttachmentByID"
      tags:
      - "attachment"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Attachment"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /attachments/{id}/copy:
    x-swagger-router-controller: attachments
    post:
      summary: "Copy an existing attachment"
      description: "Copy an existing attachment"
      operationId: "copyAttachmentByID"
      tags:
      - "attachment"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /attachments/{id}/lock:
    x-swagger-router-controller: attachments
    delete:
      summary: "Unlock an existing attachment"
      description: "Unlock an existing attachment"
      operationId: "unlockAttachmentByID"
      tags:
      - "attachment"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing attachment"
      description: "Lock an existing attachment"
      operationId: "lockAttachmentByID"
      tags:
      - "attachment"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /attachments/{id}/print:
    x-swagger-router-controller: attachments
    post:
      summary: "Print an existing attachment"
      description: "Print an existing attachment"
      operationId: "printAttachmentByID"
      tags:
      - "attachment"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "attachment"
        schema:
          $ref: "#/definitions/Attachment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankaccounts:
    x-swagger-router-controller: bankaccounts
    get:
      summary: "Retrieves a list of all bank accounts"
      description: "Retrieves a list of all bank accounts"
      operationId: "listBankAccounts"
      tags:
      - "bankaccounts"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Bank_account"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new bank account"
      description: "Creates a new bank account"
      operationId: "createBankAccount"
      tags:
      - "bankaccounts"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update bank account by {id}"
      description: "Update bank account by {id}"
      operationId: "updateBankAccountByID"
      tags:
      - "bankaccounts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankaccounts/{id}:
    x-swagger-router-controller: bankaccounts
    delete:
      summary: "Deletes an existing bank account"
      description: "Deletes an existing bank account"
      operationId: "deleteBankAccountByID"
      tags:
      - "bankaccounts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find bank account by {id}"
      description: "Find bank account by {id}"
      operationId: "getBankAccountByID"
      tags:
      - "bankaccounts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Bank_account"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankaccounts/{id}/copy:
    x-swagger-router-controller: bankaccounts
    post:
      summary: "Copy an existing bank account"
      description: "Copy an existing bank account"
      operationId: "copyBankAccountByID"
      tags:
      - "bankaccounts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankaccounts/{id}/lock:
    x-swagger-router-controller: bankaccounts
    delete:
      summary: "Unlock an existing bank account"
      description: "Unlock an existing bank account"
      operationId: "unlockBankAccountByID"
      tags:
      - "bankaccounts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing bank account"
      description: "Lock an existing bank account"
      operationId: "lockBankAccountByID"
      tags:
      - "bankaccounts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankaccounts/{id}/print:
    x-swagger-router-controller: bankaccounts
    post:
      summary: "Print an existing bank account"
      description: "Print an existing bank account"
      operationId: "printBankAccountByID"
      tags:
      - "bankaccounts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_account"
        schema:
          $ref: "#/definitions/Bank_account"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankdetails:
    x-swagger-router-controller: bankdetails
    get:
      summary: "Retrieves a list of all bank details"
      description: "Retrieves a list of all bank details"
      operationId: "listBankDetails"
      tags:
      - "bankdetails"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Bank_details"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new bank detail"
      description: "Creates a new bank detail"
      operationId: "createBankDetail"
      tags:
      - "bankdetails"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update bank detail by {id}"
      description: "Update bank detail by {id}"
      operationId: "updateBankDetailByID"
      tags:
      - "bankdetails"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankdetails/{id}:
    x-swagger-router-controller: bankdetails
    delete:
      summary: "Deletes an existing bank detail"
      description: "Deletes an existing bank detail"
      operationId: "deleteBankDetailByID"
      tags:
      - "bankdetails"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find bank detail by {id}"
      description: "Find bank detail by {id}"
      operationId: "getBankDetailByID"
      tags:
      - "bankdetails"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Bank_details"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankdetails/{id}/copy:
    x-swagger-router-controller: bankdetails
    post:
      summary: "Copy an existing bank detail"
      description: "Copy an existing bank detail"
      operationId: "copyBankDetailByID"
      tags:
      - "bankdetails"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankdetails/{id}/lock:
    x-swagger-router-controller: bankdetails
    delete:
      summary: "Unlock an existing bank detail"
      description: "Unlock an existing bank detail"
      operationId: "unlockBankDetailByID"
      tags:
      - "bankdetails"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing bank detail"
      description: "Lock an existing bank detail"
      operationId: "lockBankDetailByID"
      tags:
      - "bankdetails"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bankdetails/{id}/print:
    x-swagger-router-controller: bankdetails
    post:
      summary: "Print an existing bank detail"
      description: "Print an existing bank detail"
      operationId: "printBankDetailByID"
      tags:
      - "bankdetails"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bank_details"
        schema:
          $ref: "#/definitions/Bank_details"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bookmarks:
    x-swagger-router-controller: bookmarks
    get:
      summary: "Retrieves a list of all bookmarks"
      description: "Retrieves a list of all bookmarks"
      operationId: "listBookmarks"
      tags:
      - "bookmarks"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Bookmark"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new bookmark"
      description: "Creates a new bookmark"
      operationId: "createBookmarkByID"
      tags:
      - "bookmarks"
      parameters:
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update bookmark by {id}"
      description: "Update bookmark by {id}"
      operationId: "updateBookmarkByID"
      tags:
      - "bookmarks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bookmarks/{id}:
    x-swagger-router-controller: bookmarks
    delete:
      summary: "Deletes an existing bookmark"
      description: "Deletes an existing bookmark"
      operationId: "deleteBookmarkByID"
      tags:
      - "bookmarks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find bookmark by {id}"
      description: "Find bookmark by {id}"
      operationId: "getBookmarkByID"
      tags:
      - "bookmarks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Bookmark"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bookmarks/{id}/copy:
    x-swagger-router-controller: bookmarks
    post:
      summary: "Copy an existing bookmark"
      description: "Copy an existing bookmark"
      operationId: "copyBookmarkByID"
      tags:
      - "bookmarks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bookmarks/{id}/lock:
    x-swagger-router-controller: bookmarks
    delete:
      summary: "Unlock an existing bookmark"
      description: "Unlock an existing bookmark"
      operationId: "unlockBookmarkByID"
      tags:
      - "bookmarks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing bookmark"
      description: "Lock an existing bookmark"
      operationId: "lockBookmarkByID"
      tags:
      - "bookmarks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /bookmarks/{id}/print:
    x-swagger-router-controller: bookmarks
    post:
      summary: "Print an existing bookmark"
      description: "Print an existing bookmark"
      operationId: "printBookmarkByID"
      tags:
      - "bookmarks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "bookmark"
        schema:
          $ref: "#/definitions/Bookmark"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /buildingnetworks:
    x-swagger-router-controller: buildingnetworks
    get:
      summary: "Retrieves a list of all building networks"
      description: "Retrieves a list of all building networks"
      operationId: "listBuildingNetworks"
      tags:
      - "buildingnetworks"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "building_network"
        schema:
          $ref: "#/definitions/Building_network"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Building_network"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new building network"
      description: "Creates a new building network"
      operationId: "createBuildingNetwork"
      tags:
      - "buildingnetworks"
      parameters:
      - in: "body"
        name: "building_network"
        schema:
          $ref: "#/definitions/Building_network"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update building network by {id}"
      description: "Update building network by {id}"
      operationId: "updateBuildingNetworkByID"
      tags:
      - "buildingnetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building_network"
        schema:
          $ref: "#/definitions/Building_network"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /buildingnetworks/{id}:
    x-swagger-router-controller: buildingnetworks
    delete:
      summary: "Deletes an existing building network"
      description: "Deletes an existing building network"
      operationId: "deleteBuildingNetworkByID"
      tags:
      - "buildingnetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building_network"
        schema:
          $ref: "#/definitions/Building_network"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find building network by {id}"
      description: "Find building network by {id}"
      operationId: "getBuildingNetworkByID"
      tags:
      - "buildingnetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building_network"
        schema:
          $ref: "#/definitions/Building_network"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Building_network"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /buildings:
    x-swagger-router-controller: buildings
    get:
      summary: "Retrieves a list of all buildings"
      description: "Retrieves a list of all buildings"
      operationId: "listBuildings"
      tags:
      - "buildings"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Building"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new building"
      description: "Creates a new building"
      operationId: "createBuildingByID"
      tags:
      - "buildings"
      parameters:
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update building by {id}"
      description: "Update building by {id}"
      operationId: "updateBuildingByID"
      tags:
      - "buildings"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /buildings/{id}:
    x-swagger-router-controller: buildings
    delete:
      summary: "Deletes an existing building"
      description: "Deletes an existing building"
      operationId: "deleteBuildingByID"
      tags:
      - "buildings"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find building by {id}"
      description: "Find building by {id}"
      operationId: "getBuildingByID"
      tags:
      - "buildings"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Building"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /buildings/{id}/copy:
    x-swagger-router-controller: buildings
    post:
      summary: "Copy an existing building"
      description: "Copy an existing building"
      operationId: "copyBuildingByID"
      tags:
      - "buildings"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /buildings/{id}/lock:
    x-swagger-router-controller: buildings
    delete:
      summary: "Unlock an existing building"
      description: "Unlock an existing building"
      operationId: "unlockBuildingByID"
      tags:
      - "buildings"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing building"
      description: "Lock an existing building"
      operationId: "lockBuildingByID"
      tags:
      - "buildings"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /buildings/{id}/print:
    x-swagger-router-controller: buildings
    post:
      summary: "Print an existing building"
      description: "Print an existing building"
      operationId: "printBuildingByID"
      tags:
      - "buildings"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "building"
        schema:
          $ref: "#/definitions/Building"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /categories:
    x-swagger-router-controller: categories
    get:
      summary: "Retrieves a list of all categories"
      description: "Retrieves a list of all categories"
      operationId: "listCategories"
      tags:
      - "categories"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Category"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new category"
      description: "Creates a new category"
      operationId: "createCategory"
      tags:
      - "categories"
      parameters:
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update category by {id}"
      description: "Update category by {id}"
      operationId: "updateCategoryByID"
      tags:
      - "categories"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /categories/{id}:
    x-swagger-router-controller: categories
    delete:
      summary: "Deletes an existing category"
      description: "Deletes an existing category"
      operationId: "deleteCategoryByID"
      tags:
      - "categories"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find category by {id}"
      description: "Find category by {id}"
      operationId: "getCategoryByID"
      tags:
      - "categories"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Category"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /categories/{id}/copy:
    x-swagger-router-controller: categories
    post:
      summary: "Copy an existing category"
      description: "Copy an existing category"
      operationId: "copyCategoryByID"
      tags:
      - "categories"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /categories/{id}/lock:
    x-swagger-router-controller: categories
    delete:
      summary: "Unlock an existing category"
      description: "Unlock an existing category"
      operationId: "unlockCategoryByID"
      tags:
      - "categories"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing category"
      description: "Lock an existing category"
      operationId: "lockCategoryByID"
      tags:
      - "categories"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /categories/{id}/print:
    x-swagger-router-controller: categories
    post:
      summary: "Print an existing category"
      description: "Print an existing category"
      operationId: "printCategoryByID"
      tags:
      - "categories"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "category"
        schema:
          $ref: "#/definitions/Category"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /comments:
    x-swagger-router-controller: comments
    get:
      summary: "Retrieves a list of all comments"
      description: "Retrieves a list of all comments"
      operationId: "listComments"
      tags:
      - "comments"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Comment"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new comment"
      description: "Creates a new comment"
      operationId: "createComment"
      tags:
      - "comments"
      parameters:
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update comment by {id}"
      description: "Update comment by {id}"
      operationId: "updateCommentByID"
      tags:
      - "comments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /comments/{id}:
    x-swagger-router-controller: comments
    delete:
      summary: "Deletes an existing comment"
      description: "Deletes an existing comment"
      operationId: "deleteCommentByID"
      tags:
      - "comments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find comment by {id}"
      description: "Find comment by {id}"
      operationId: "getCommentByID"
      tags:
      - "comments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Comment"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /comments/{id}/copy:
    x-swagger-router-controller: comments
    post:
      summary: "Copy an existing comment"
      description: "Copy an existing comment"
      operationId: "copyCommentByID"
      tags:
      - "comments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /comments/{id}/lock:
    x-swagger-router-controller: comments
    delete:
      summary: "Unlock an existing comment"
      description: "Unlock an existing comment"
      operationId: "unlockCommentByID"
      tags:
      - "comments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing comment"
      description: "Lock an existing comment"
      operationId: "lockCommentByID"
      tags:
      - "comments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /comments/{id}/print:
    x-swagger-router-controller: comments
    post:
      summary: "Print an existing comment"
      description: "Print an existing comment"
      operationId: "printCommentByID"
      tags:
      - "comments"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "comment"
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contactnetworks:
    x-swagger-router-controller: contactnetworks
    get:
      summary: "Retrieves a list of all contact networks"
      description: "Retrieves a list of all contact networks"
      operationId: "listContactNetworks"
      tags:
      - "contactnetworks"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "contact_network"
        schema:
          $ref: "#/definitions/Contact_network"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Contact_network"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new contact network"
      description: "Creates a new contact network"
      operationId: "createContactNetwork"
      tags:
      - "contactnetworks"
      parameters:
      - in: "body"
        name: "contact_network"
        schema:
          $ref: "#/definitions/Contact_network"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update contact network by {id}"
      description: "Update contact network by {id}"
      operationId: "updateContactNetworkByID"
      tags:
      - "contactnetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact_network"
        schema:
          $ref: "#/definitions/Contact_network"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contactnetworks/{id}:
    x-swagger-router-controller: contactnetworks
    delete:
      summary: "Deletes an existing contact network"
      description: "Deletes an existing contact network"
      operationId: "deleteContactNetworkByID"
      tags:
      - "contactnetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact_network"
        schema:
          $ref: "#/definitions/Contact_network"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find contact network by {id}"
      description: "Find contact network by {id}"
      operationId: "getContactNetworkByID"
      tags:
      - "contactnetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact_network"
        schema:
          $ref: "#/definitions/Contact_network"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Contact_network"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contacts:
    x-swagger-router-controller: contacts
    get:
      summary: "Retrieves a list of all contacts"
      description: "Retrieves a list of all contacts"
      operationId: "listContacts"
      tags:
      - "contacts"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Contact"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new contact"
      description: "Creates a new contact"
      operationId: "createContact"
      tags:
      - "contacts"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update contact by {id}"
      description: "Update contact by {id}"
      operationId: "updateContactByID"
      tags:
      - "contacts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contacts/{id}:
    x-swagger-router-controller: contacts
    delete:
      summary: "Deletes an existing contact"
      description: "Deletes an existing contact"
      operationId: "deleteContactByID"
      tags:
      - "contacts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find contact by {id}"
      description: "Find contact by {id}"
      operationId: "getContactByID"
      tags:
      - "contacts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Contact"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contacts/{id}/copy:
    x-swagger-router-controller: contacts
    post:
      summary: "Copy an existing contact"
      description: "Copy an existing contact"
      operationId: "copyContactByID"
      tags:
      - "contacts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contacts/{id}/lock:
    x-swagger-router-controller: contacts
    delete:
      summary: "Unlock an existing contact"
      description: "Unlock an existing contact"
      operationId: "unlockContactByID"
      tags:
      - "contacts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing contact"
      description: "Lock an existing contact"
      operationId: "lockContactByID"
      tags:
      - "contacts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contacts/{id}/print:
    x-swagger-router-controller: contacts
    post:
      summary: "Print an existing contact"
      description: "Print an existing contact"
      operationId: "printContactByID"
      tags:
      - "contacts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contact"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contracts:
    x-swagger-router-controller: contracts
    get:
      summary: "Retrieves a list of all contracts"
      description: "Retrieves a list of all contracts"
      operationId: "listContracts"
      tags:
      - "contracts"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Contract"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new contract"
      description: "Creates a new contract"
      operationId: "createContract"
      tags:
      - "contracts"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update contract by {id}"
      description: "Update contract by {id}"
      operationId: "updateContractByID"
      tags:
      - "contracts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contracts/{id}:
    x-swagger-router-controller: contracts
    delete:
      summary: "Deletes an existing contract"
      description: "Deletes an existing contract"
      operationId: "deleteContractByID"
      tags:
      - "contracts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find contract by {id}"
      description: "Find contract by {id}"
      operationId: "getContractByID"
      tags:
      - "contracts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Contract"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contracts/{id}/copy:
    x-swagger-router-controller: contracts
    post:
      summary: "Copy an existing contract"
      description: "Copy an existing contracts"
      operationId: "copyContractByID"
      tags:
      - "contracts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contracts/{id}/lock:
    x-swagger-router-controller: contracts
    delete:
      summary: "Unlock an existing contract"
      description: "Unlock an existing contract"
      operationId: "unlockContractByID"
      tags:
      - "contracts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing contract"
      description: "Lock an existing contract"
      operationId: "lockContractByID"
      tags:
      - "contracts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /contracts/{id}/print:
    x-swagger-router-controller: contracts
    post:
      summary: "Print an existing contract"
      description: "Print an existing contract"
      operationId: "printContractByID"
      tags:
      - "contracts"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "contract"
        schema:
          $ref: "#/definitions/Contract"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /creditcards:
    x-swagger-router-controller: creditcards
    get:
      summary: "Retrieves a list of all credit cards"
      description: "Retrieves a list of all credit cards"
      operationId: "listCreditCards"
      tags:
      - "creditcards"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Credit_card"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new credit card"
      description: "Creates a new credit card"
      operationId: "createCreditCard"
      tags:
      - "creditcards"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update credit card by {id}"
      description: "Update credit card by {id}"
      operationId: "updateCreditCardByID"
      tags:
      - "creditcards"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /creditcards/{id}:
    x-swagger-router-controller: creditcards
    delete:
      summary: "Deletes an existing credit card"
      description: "Deletes an existing credit card"
      operationId: "deleteCreditCardByID"
      tags:
      - "creditcards"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find credit card by {id}"
      description: "Find credit card by {id}"
      operationId: "getCreditCardByID"
      tags:
      - "creditcards"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Credit_card"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /creditcards/{id}/copy:
    x-swagger-router-controller: creditcards
    post:
      summary: "Copy an existing credit card"
      description: "Copy an existing credit card"
      operationId: "copyCreditCardByID"
      tags:
      - "creditcards"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /creditcards/{id}/lock:
    x-swagger-router-controller: creditcards
    delete:
      summary: "Unlock an existing credit card"
      description: "Unlock an existing credit card"
      operationId: "unlockCreditCardByID"
      tags:
      - "creditcards"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing credit card"
      description: "Lock an existing credit card"
      operationId: "lockCreditCardByID"
      tags:
      - "creditcards"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /creditcards/{id}/print:
    x-swagger-router-controller: creditcards
    post:
      summary: "Print an existing credit card"
      description: "Print an existing credit card"
      operationId: "printCreditCardByID"
      tags:
      - "creditcards"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "credit_card"
        schema:
          $ref: "#/definitions/Credit_card"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /energymeters:
    x-swagger-router-controller: energymeters
    get:
      summary: "Retrieves a list of all energy meters"
      description: "Retrieves a list of all energy meters"
      operationId: "listEnergyMeters"
      tags:
      - "energymeters"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Energy_meter"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new energy meter"
      description: "Creates a energy meter card"
      operationId: "createEnergyMeter"
      tags:
      - "energymeters"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update energy meter by {id}"
      description: "Update energy meter by {id}"
      operationId: "updateEnergyMeterByID"
      tags:
      - "energymeters"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /energymeters/{id}:
    x-swagger-router-controller: energymeters
    delete:
      summary: "Deletes an existing energy meter"
      description: "Deletes an existing energy meter"
      operationId: "deleteEnergyMeterByID"
      tags:
      - "energymeters"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find energy meter by {id}"
      description: "Find energy meter by {id}"
      operationId: "getEnergyMeterByID"
      tags:
      - "energymeters"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Energy_meter"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /energymeters/{id}/copy:
    x-swagger-router-controller: energymeters
    post:
      summary: "Copy an existing energy meter"
      description: "Copy an existing energy meter"
      operationId: "copyEnergyMeterByID"
      tags:
      - "energymeters"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /energymeters/{id}/lock:
    x-swagger-router-controller: energymeters
    delete:
      summary: "Unlock an existing energy meter"
      description: "Unlock an existing energy meter"
      operationId: "unlockEnergyMeterByID"
      tags:
      - "energymeters"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing energy meter"
      description: "Lock an existing energy meter"
      operationId: "lockEnergyMeterByID"
      tags:
      - "energymeters"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /energymeters/{id}/print:
    x-swagger-router-controller: energymeters
    post:
      summary: "Print an existing energy meter"
      description: "Print an existing energy meter"
      operationId: "printEnergyMeterByID"
      tags:
      - "energymeters"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "energy_meter"
        schema:
          $ref: "#/definitions/Energy_meter"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /entrances:
    x-swagger-router-controller: entrances
    get:
      summary: "Retrieves a list of all entrances"
      description: "Retrieves a list of all entrances"
      operationId: "listEntrances"
      tags:
      - "entrances"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Entrance"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new entrance"
      description: "Creates a new entrance"
      operationId: "createEntrance"
      tags:
      - "entrances"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update entrance by {id}"
      description: "Update entrance by {id}"
      operationId: "updateEntranceByID"
      tags:
      - "entrances"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /entrances/{id}:
    x-swagger-router-controller: entrances
    delete:
      summary: "Deletes an existing entrance"
      description: "Deletes an existing entrance"
      operationId: "deleteEntranceByID"
      tags:
      - "entrances"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find entrance by {id}"
      description: "Find entrance by {id}"
      operationId: "getEntranceByID"
      tags:
      - "entrances"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Entrance"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /entrances/{id}/copy:
    x-swagger-router-controller: entrances
    post:
      summary: "Copy an existing entrance"
      description: "Copy an existing entrance"
      operationId: "copyEntranceByID"
      tags:
      - "entrances"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /entrances/{id}/lock:
    x-swagger-router-controller: entrances
    delete:
      summary: "Unlock an existing entrance"
      description: "Unlock an existing entrance"
      operationId: "unlockEntranceByID"
      tags:
      - "entrances"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing entrance"
      description: "Lock an existing entrance"
      operationId: "lockEntranceByID"
      tags:
      - "entrances"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /entrances/{id}/print:
    x-swagger-router-controller: entrances
    post:
      summary: "Print an existing entrance"
      description: "Print an existing entrance"
      operationId: "printEntranceByID"
      tags:
      - "entrances"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "entrance"
        schema:
          $ref: "#/definitions/Entrance"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /favorites:
    x-swagger-router-controller: favorites
    get:
      summary: "Retrieves a list of all favorites"
      description: "Retrieves a list of all favorites"
      operationId: "listFavorites"
      tags:
      - "favorites"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Favorite"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new favorit"
      description: "Creates a new favorit"
      operationId: "createFavorit"
      tags:
      - "favorites"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update favorit by {id}"
      description: "Update favorit by {id}"
      operationId: "updateFavoritByID"
      tags:
      - "favorites"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /favorites/{id}:
    x-swagger-router-controller: favorites
    delete:
      summary: "Deletes an existing favorit"
      description: "Deletes an existing favorit"
      operationId: "deleteFavoritByID"
      tags:
      - "favorites"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find favorit by {id}"
      description: "Find favorit by {id}"
      operationId: "getFavoritByID"
      tags:
      - "favorites"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Favorite"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /favorites/{id}/copy:
    x-swagger-router-controller: favorites
    post:
      summary: "Copy an existing favorit"
      description: "Copy an existing favorit"
      operationId: "copyFavoritByID"
      tags:
      - "favorites"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /favorites/{id}/lock:
    x-swagger-router-controller: favorites
    delete:
      summary: "Unlock an existing favorit"
      description: "Unlock an existing favorit"
      operationId: "unlockFavoritByID"
      tags:
      - "favorites"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing favorit"
      description: "Lock an existing favorit"
      operationId: "lockFavoritByID"
      tags:
      - "favorites"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /favorites/{id}/print:
    x-swagger-router-controller: favorites
    post:
      summary: "Print an existing favorit"
      description: "Print an existing favorit"
      operationId: "printFavoritByID"
      tags:
      - "favorites"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "favorite"
        schema:
          $ref: "#/definitions/Favorite"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /financialprofiles:
    x-swagger-router-controller: financialprofiles
    get:
      summary: "Retrieves a list of all financial profiles"
      description: "Retrieves a list of all financial profiles"
      operationId: "listFinancialProfiles"
      tags:
      - "financialprofiles"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Financial_profile"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new financial profile"
      description: "Creates a financial profile card"
      operationId: "createFinancialProfile"
      tags:
      - "financialprofiles"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update financial profile by {id}"
      description: "Update financial profile by {id}"
      operationId: "updateFinancialProfileByID"
      tags:
      - "financialprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /financialprofiles/{id}:
    x-swagger-router-controller: financialprofiles
    delete:
      summary: "Deletes an existing financial profile"
      description: "Deletes an existing financial profile"
      operationId: "deleteFinancialProfileByID"
      tags:
      - "financialprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find financial profile by {id}"
      description: "Find financial profile by {id}"
      operationId: "getFinancialProfileByID"
      tags:
      - "financialprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Financial_profile"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /financialprofiles/{id}/copy:
    x-swagger-router-controller: financialprofiles
    post:
      summary: "Copy an existing financial profile"
      description: "Copy an existing financial profile"
      operationId: "copyFinancialProfileByID"
      tags:
      - "financialprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /financialprofiles/{id}/lock:
    x-swagger-router-controller: financialprofiles
    delete:
      summary: "Unlock an existing financial profile"
      description: "Unlock an existing financial profile"
      operationId: "unlockFinancialProfileByID"
      tags:
      - "financialprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing financial profile"
      description: "Lock an existing financial profile"
      operationId: "lockFinancialProfileByID"
      tags:
      - "financialprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /financialprofiles/{id}/print:
    x-swagger-router-controller: financialprofiles
    post:
      summary: "Print an existing financial profile"
      description: "Print an existing financial profile"
      operationId: "printFinancialProfileByID"
      tags:
      - "financialprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "financial_profile"
        schema:
          $ref: "#/definitions/Financial_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /groups:
    x-swagger-router-controller: groups
    get:
      summary: "Retrieves a list of all groups"
      description: "Retrieves a list of all groups"
      operationId: "listGroups"
      tags:
      - "groups"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Group_manager"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new group"
      description: "Creates a new group"
      operationId: "createGroup"
      tags:
      - "groups"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update group by {id}"
      description: "Update group by {id}"
      operationId: "updateGroupByID"
      tags:
      - "groups"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /groups/{id}:
    x-swagger-router-controller: groups
    delete:
      summary: "Deletes an existing group"
      description: "Deletes an existing group"
      operationId: "deleteGroupByID"
      tags:
      - "groups"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find group by {id}"
      description: "Find group by {id}"
      operationId: "getGroupByID"
      tags:
      - "groups"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Group_manager"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /groups/{id}/copy:
    x-swagger-router-controller: groups
    post:
      summary: "Copy an existing group"
      description: "Copy an existing group"
      operationId: "copyGroupByID"
      tags:
      - "groups"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /groups/{id}/lock:
    x-swagger-router-controller: groups
    delete:
      summary: "Unlock an existing group"
      description: "Unlock an existing group"
      operationId: "unlockGroupByID"
      tags:
      - "groups"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing group"
      description: "Lock an existing group"
      operationId: "lockGroupByID"
      tags:
      - "groups"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /groups/{id}/print:
    x-swagger-router-controller: groups
    post:
      summary: "Print an existing group"
      description: "Print an existing group"
      operationId: "printGroupByID"
      tags:
      - "groups"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "group_manager"
        schema:
          $ref: "#/definitions/Group_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /historicenergyconsumptions:
    x-swagger-router-controller: historicenergyconsumptions
    get:
      summary: "Retrieves a list of all historic energy consumptions"
      description: "Retrieves a list of all historic energy consumptions"
      operationId: "listHistoricEnergyConsumptions"
      tags:
      - "historicenergyconsumptions"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Historic_energy_consumption"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new historic energy consumption"
      description: "Creates a historic energy consumption card"
      operationId: "createHistoricEnergyConsumption"
      tags:
      - "historicenergyconsumptions"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update historic energy consumption by {id}"
      description: "Update historic energy consumption by {id}"
      operationId: "updateHistoricEnergyConsumptionByID"
      tags:
      - "historicenergyconsumptions"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /historicenergyconsumptions/{id}:
    x-swagger-router-controller: historicenergyconsumptions
    delete:
      summary: "Deletes an existing historic energy consumption"
      description: "Deletes an existing historic energy consumption"
      operationId: "deleteHistoricEnergyConsumptionByID"
      tags:
      - "historicenergyconsumptions"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find historic energy consumption by {id}"
      description: "Find historic energy consumption by {id}"
      operationId: "getHistoricEnergyConsumptionByID"
      tags:
      - "historicenergyconsumptions"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Historic_energy_consumption"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /historicenergyconsumptions/{id}/copy:
    x-swagger-router-controller: historicenergyconsumptions
    post:
      summary: "Copy an existing historic energy consumption"
      description: "Copy an existing historic energy consumption"
      operationId: "copyHistoricEnergyConsumptionByID"
      tags:
      - "historicenergyconsumptions"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /historicenergyconsumptions/{id}/lock:
    x-swagger-router-controller: historicenergyconsumptions
    delete:
      summary: "Unlock an existing historic energy consumption"
      description: "Unlock an existing historic energy consumption"
      operationId: "unlockHistoricEnergyConsumptionByID"
      tags:
      - "historicenergyconsumptions"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing historic energy consumption"
      description: "Lock an existing historic energy consumption"
      operationId: "lockHistoricEnergyConsumptionByID"
      tags:
      - "historicenergyconsumptions"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /historicenergyconsumptions/{id}/print:
    x-swagger-router-controller: historicenergyconsumptions
    post:
      summary: "Print an existing historic energy consumption"
      description: "Print an existing historic energy consumption"
      operationId: "printHistoricEnergyConsumptionByID"
      tags:
      - "historicenergyconsumptions"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "historic_energy_consumption"
        schema:
          $ref: "#/definitions/Historic_energy_consumption"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizationidentifiers:
    x-swagger-router-controller: organizationidentifiers
    get:
      summary: "Retrieves a list of all organization identifiers"
      description: "Retrieves a list of all organization identifiers"
      operationId: "listOrganizationIdentifiers"
      tags:
      - "organizationidentifiers"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Organization_identifier"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new organization identifier"
      description: "Creates a new organization identifier"
      operationId: "createOrganizationIdentifier"
      tags:
      - "organizationidentifiers"
      parameters:
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update organization identifier by {id}"
      description: "Update organization identifier by {id}"
      operationId: "updateOrganizationIdentifierByID"
      tags:
      - "organizationidentifiers"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizationidentifiers/{id}:
    x-swagger-router-controller: organizationidentifiers
    delete:
      summary: "Deletes an existing organization identifier"
      description: "Deletes an existing organization identifier"
      operationId: "deleteOrganizationIdentifierByID"
      tags:
      - "organizationidentifiers"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find organization identifier by {id}"
      description: "Find organization identifier by {id}"
      operationId: "getOrganizationIdentifierByID"
      tags:
      - "organizationidentifiers"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Organization_identifier"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizationidentifiers/{id}/copy:
    x-swagger-router-controller: organizationidentifiers
    post:
      summary: "Copy an existing organization identifier"
      description: "Copy an existing organization identifier"
      operationId: "copyOrganizationIdentifierByID"
      tags:
      - "organizationidentifiers"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizationidentifiers/{id}/lock:
    x-swagger-router-controller: organizationidentifiers
    delete:
      summary: "Unlock an existing organization identifier"
      description: "Unlock an existing organization identifier"
      operationId: "unlockOrganizationIdentifierByID"
      tags:
      - "organizationidentifiers"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing organization identifier"
      description: "Lock an existing organization identifier"
      operationId: "lockOrganizationIdentifierByID"
      tags:
      - "organizationidentifiers"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizationidentifiers/{id}/print:
    x-swagger-router-controller: organizationidentifiers
    post:
      summary: "Print an existing organization identifier"
      description: "Print an existing organization identifier"
      operationId: "printOrganizationIdentifierByID"
      tags:
      - "organizationidentifiers"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization_identifier"
        schema:
          $ref: "#/definitions/Organization_identifier"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizations:
    x-swagger-router-controller: organizations
    get:
      summary: "Retrieves a list of all organizations"
      description: "Retrieves a list of all organizations"
      operationId: "listOrganizations"
      tags:
      - "organizations"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Organization"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new organization"
      description: "Creates a new organization"
      operationId: "createOrganization"
      tags:
      - "organizations"
      parameters:
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update organization by {id}"
      description: "Update organization by {id}"
      operationId: "updateOrganizationByID"
      tags:
      - "organizations"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizations/{id}:
    x-swagger-router-controller: organizations
    delete:
      summary: "Deletes an existing organization"
      description: "Deletes an existing organization"
      operationId: "deleteOrganizationByID"
      tags:
      - "organizations"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find organization by {id}"
      description: "Find organization by {id}"
      operationId: "getOrganizationByID"
      tags:
      - "organizations"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Organization"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizations/{id}/copy:
    x-swagger-router-controller: organizations
    post:
      summary: "Copy an existing organization"
      description: "Copy an existing organization"
      operationId: "copyOrganizationByID"
      tags:
      - "organizations"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizations/{id}/lock:
    x-swagger-router-controller: organizations
    delete:
      summary: "Unlock an existing organization"
      description: "Unlock an existing organization"
      operationId: "unlockOrganizationByID"
      tags:
      - "organizations"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing organization"
      description: "Lock an existing organization"
      operationId: "lockOrganizationByID"
      tags:
      - "organizations"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /organizations/{id}/print:
    x-swagger-router-controller: organizations
    post:
      summary: "Print an existing organization"
      description: "Print an existing organization"
      operationId: "printOrganizationByID"
      tags:
      - "organizations"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "organization"
        schema:
          $ref: "#/definitions/Organization"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointofdeliverynetworks:
    x-swagger-router-controller: pointofdeliverynetworks
    get:
      summary: "Retrieves a list of all point of delivery networks"
      description: "Retrieves a list of all point of delivery networks"
      operationId: "listPointOfDeliveryNetworks"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Point_of_delivery_network"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new point of delivery network"
      description: "Creates a new point of delivery network"
      operationId: "createPointOfDeliveryNetwork"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update point of delivery network by {id}"
      description: "Update point of delivery network by {id}"
      operationId: "updatePointOfDeliveryNetworkByID"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointofdeliverynetworks/{id}:
    x-swagger-router-controller: pointofdeliverynetworks
    delete:
      summary: "Deletes an existing point of delivery network"
      description: "Deletes an existing point of delivery network"
      operationId: "deletePointOfDeliveryNetworkByID"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find point of delivery network by {id}"
      description: "Find point of delivery network by {id}"
      operationId: "getPointOfDeliveryNetworkByID"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Point_of_delivery_network"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointofdeliverynetworks/{id}/copy:
    x-swagger-router-controller: pointofdeliverynetworks
    post:
      summary: "Copy an existing point of delivery network"
      description: "Copy an existing point of delivery network"
      operationId: "copyPointOfDeliveryNetworkByID"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointofdeliverynetworks/{id}/lock:
    x-swagger-router-controller: pointofdeliverynetworks
    delete:
      summary: "Unlock an existing point of delivery network"
      description: "Unlock an existing point of delivery network"
      operationId: "unlockPointOfDeliveryNetworkByID"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing point of delivery network"
      description: "Lock an existing point of delivery network"
      operationId: "lockPointOfDeliveryNetworkByID"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointofdeliverynetworks/{id}/print:
    x-swagger-router-controller: pointofdeliverynetworks
    post:
      summary: "Print an existing point of delivery network"
      description: "Print an existing point of delivery network"
      operationId: "printPointOfDeliveryNetworkByID"
      tags:
      - "pointofdeliverynetworks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery_network"
        schema:
          $ref: "#/definitions/Point_of_delivery_network"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointsofdelivery:
    x-swagger-router-controller: pointsofdelivery
    get:
      summary: "Retrieves a list of all points of delivery"
      description: "Retrieves a list of all points of delivery"
      operationId: "listPointsOfDelivery"
      tags:
      - "pointsofdelivery"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Point_of_delivery"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new point of delivery"
      description: "Creates a new point of delivery"
      operationId: "createPointOfDelivery"
      tags:
      - "pointsofdelivery"
      parameters:
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update point of delivery by {id}"
      description: "Update point of delivery by {id}"
      operationId: "updatePointOfDeliveryByID"
      tags:
      - "pointsofdelivery"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointsofdelivery/{id}:
    x-swagger-router-controller: pointsofdelivery
    delete:
      summary: "Deletes an existing point of delivery"
      description: "Deletes an existing point of delivery"
      operationId: "deletePointOfDeliveryByID"
      tags:
      - "pointsofdelivery"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find point of delivery by {id}"
      description: "Find point of delivery by {id}"
      operationId: "getPointOfDeliveryByID"
      tags:
      - "pointsofdelivery"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Point_of_delivery"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointsofdelivery/{id}/copy:
    x-swagger-router-controller: pointsofdelivery
    post:
      summary: "Copy an existing point of delivery"
      description: "Copy an existing point of delivery"
      operationId: "copyPointOfDeliveryByID"
      tags:
      - "pointsofdelivery"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointsofdelivery/{id}/lock:
    x-swagger-router-controller: pointsofdelivery
    delete:
      summary: "Unlock an existing point of delivery"
      description: "Unlock an existing point of delivery"
      operationId: "unlockPointOfDeliveryByID"
      tags:
      - "pointsofdelivery"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing point of delivery"
      description: "Lock an existing point of delivery"
      operationId: "lockPointOfDeliveryByID"
      tags:
      - "pointsofdelivery"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /pointsofdelivery/{id}/print:
    x-swagger-router-controller: pointsofdelivery
    post:
      summary: "Print an existing point of delivery"
      description: "Print an existing point of delivery"
      operationId: "printPointOfDeliveryByID"
      tags:
      - "pointsofdelivery"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "point_of_delivery"
        schema:
          $ref: "#/definitions/Point_of_delivery"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /roles:
    x-swagger-router-controller: roles
    post:
      summary: "Creates a new role"
      description: "Creates a new role"
      operationId: "createRole"
      tags:
      - "roles"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws
    get:
      summary: "Retrieves a list of all roles"
      description: "Retrieves a list of all roles"
      operationId: "listRoles"
      tags:
      - "roles"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Roles"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update role by {id}"
      description: "Update role by {id}"
      operationId: "updateRoleByID"
      tags:
      - "roles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /roles/{id}:
    x-swagger-router-controller: roles
    delete:
      summary: "Deletes an existing role"
      description: "Deletes an existing role"
      operationId: "deleteRoleByID"
      tags:
      - "roles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find role by {id}"
      description: "Find role by {id}"
      operationId: "getRoleByID"
      tags:
      - "roles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Roles"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /roles/{id}/copy:
    x-swagger-router-controller: roles
    post:
      summary: "Copy an existing role"
      description: "Copy an existing role"
      operationId: "copyRoleByID"
      tags:
      - "roles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /roles/{id}/lock:
    x-swagger-router-controller: roles
    delete:
      summary: "Unlock an existing role"
      description: "Unlock an existing role"
      operationId: "unlockRoleByID"
      tags:
      - "roles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing role"
      description: "Lock an existing role"
      operationId: "lockRoleByID"
      tags:
      - "roles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /roles/{id}/print:
    x-swagger-router-controller: roles
    post:
      summary: "Print an existing role"
      description: "Print an existing role"
      operationId: "printRoleByID"
      tags:
      - "roles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "role"
        schema:
          $ref: "#/definitions/Roles"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /rooms:
    x-swagger-router-controller: rooms
    get:
      summary: "Retrieves a list of all rooms"
      description: "Retrieves a list of all rooms"
      operationId: "listRooms"
      tags:
      - "rooms"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Room"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new room"
      description: "Creates a new room"
      operationId: "createRoom"
      tags:
      - "rooms"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update room by {id}"
      description: "Update room by {id}"
      operationId: "updateRoomByID"
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /rooms/{id}:
    x-swagger-router-controller: rooms
    delete:
      summary: "Deletes an existing room"
      description: "Deletes an existing room"
      operationId: "deleteRoomByID"
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find room by {id}"
      description: "Find room by {id}"
      operationId: "getRoomByID"
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Room"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /rooms/{id}/copy:
    x-swagger-router-controller: rooms
    post:
      summary: "Copy an existing room"
      description: "Copy an existing room"
      operationId: "copyRoomByID"
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /rooms/{id}/lock:
    x-swagger-router-controller: rooms
    delete:
      summary: "Unlock an existing room"
      description: "Unlock an existing room"
      operationId: "unlockRoomByID"
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing room"
      description: "Lock an existing room"
      operationId: "lockRoomByID"
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /rooms/{id}/print:
    x-swagger-router-controller: rooms
    post:
      summary: "Print an existing room"
      description: "Print an existing room"
      operationId: "printRoomByID"
      tags:
      - "rooms"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "room"
        schema:
          $ref: "#/definitions/Room"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /sepastandingorders:
    x-swagger-router-controller: sepastandingorders
    get:
      summary: "Retrieves a list of all sepa standing orders"
      description: "Retrieves a list of all sepa standing orders"
      operationId: "listSepaStandingOrders"
      tags:
      - "sepastandingorders"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Sepa_standing_order"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new sepa standing order"
      description: "Creates a sepa standing order"
      operationId: "createSepaStandingOrder"
      tags:
      - "sepastandingorders"
      parameters:
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update sepa standing order by {id}"
      description: "Update sepa standing order by {id}"
      operationId: "updateSepaStandingOrderByID"
      tags:
      - "sepastandingorders"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /sepastandingorders/{id}:
    x-swagger-router-controller: sepastandingorders
    delete:
      summary: "Deletes an existing sepa standing order"
      description: "Deletes an existing sepa standing order"
      operationId: "deleteSepaStandingOrderByID"
      tags:
      - "sepastandingorders"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find sepa standing order by {id}"
      description: "Find sepa standing order by {id}"
      operationId: "getSepaStandingOrderByID"
      tags:
      - "sepastandingorders"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Sepa_standing_order"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /sepastandingorders/{id}/copy:
    x-swagger-router-controller: sepastandingorders
    post:
      summary: "Copy an existing sepa standing order"
      description: "Copy an existing sepa standing order"
      operationId: "copySepaStandingOrderByID"
      tags:
      - "sepastandingorders"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /sepastandingorders/{id}/lock:
    x-swagger-router-controller: sepastandingorders
    delete:
      summary: "Unlock an existing sepa standing order"
      description: "Unlock an existing sepa standing order"
      operationId: "unlockSepaStandingOrderByID"
      tags:
      - "sepastandingorders"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing sepa standing order"
      description: "Lock an existing sepa standing order"
      operationId: "lockSepaStandingOrderByID"
      tags:
      - "sepastandingorders"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /sepastandingorders/{id}/print:
    x-swagger-router-controller: sepastandingorders
    post:
      summary: "Print an existing sepa standing order"
      description: "Print an existing sepa standing order"
      operationId: "printSepaStandingOrderByID"
      tags:
      - "sepastandingorders"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "sepa_standing_order"
        schema:
          $ref: "#/definitions/Sepa_standing_order"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /status:
    x-swagger-router-controller: status
    get:
      summary: "Retrieves a list of all status"
      description: "Retrieves a list of all status"
      operationId: "listStatus"
      tags:
      - "status"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Status_manager"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new status"
      description: "Creates a new status"
      operationId: "createStatus"
      tags:
      - "status"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update status by {id}"
      description: "Update status by {id}"
      operationId: "updateStatusByID"
      tags:
      - "status"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /status/{id}:
    x-swagger-router-controller: status
    delete:
      summary: "Deletes an existing status"
      description: "Deletes an existing status"
      operationId: "deleteStatusByID"
      tags:
      - "status"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find status by {id}"
      description: "Find status by {id}"
      operationId: "getStatusByID"
      tags:
      - "status"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Status_manager"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws
  /status/{id}/copy:
    x-swagger-router-controller: status
    post:
      summary: "Copy an existing status"
      description: "Copy an existing status"
      operationId: "copyStatusByID"
      tags:
      - "status"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /status/{id}/lock:
    x-swagger-router-controller: status
    delete:
      summary: "Unlock an existing status"
      description: "Unlock an existing status"
      operationId: "unlockStatusByID"
      tags:
      - "status"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing status"
      description: "Lock an existing status"
      operationId: "lockStatusByID"
      tags:
      - "status"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /status/{id}/print:
    x-swagger-router-controller: status
    post:
      summary: "Print an existing status"
      description: "Print an existing status"
      operationId: "printStatusByID"
      tags:
      - "status"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "status_manager"
        schema:
          $ref: "#/definitions/Status_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tags:
    x-swagger-router-controller: tags
    get:
      summary: "Retrieves a list of all tags"
      description: "Retrieves a list of all tags"
      operationId: "listTags"
      tags:
      - "tags"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Tag_manager"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new tag"
      description: "Creates a new tag"
      operationId: "createTag"
      tags:
      - "tags"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update tag by {id}"
      description: "Update tag by {id}"
      operationId: "updateTagByID"
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tags/{id}:
    x-swagger-router-controller: tags
    delete:
      summary: "Deletes an existing tag"
      description: "Deletes an existing tag"
      operationId: "deleteTagByID"
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find tag by {id}"
      description: "Find tag by {id}"
      operationId: "getTagByID"
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Tag_manager"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tags/{id}/copy:
    x-swagger-router-controller: tags
    post:
      summary: "Copy an existing tag"
      description: "Copy an existing tag"
      operationId: "copyTagByID"
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tags/{id}/lock:
    x-swagger-router-controller: tags
    delete:
      summary: "Unlock an existing tag"
      description: "Unlock an existing tag"
      operationId: "unlockTagByID"
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing tag"
      description: "Lock an existing tag"
      operationId: "lockTagByID"
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tags/{id}/print:
    x-swagger-router-controller: tags
    post:
      summary: "Print an existing tag"
      description: "Print an existing tag"
      operationId: "printTagByID"
      tags:
      - "tags"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "tag_manager"
        schema:
          $ref: "#/definitions/Tag_manager"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tasks:
    x-swagger-router-controller: tasks
    get:
      summary: "Retrieves a list of all tasks"
      description: "Retrieves a list of all tasks"
      operationId: "listTasks"
      tags:
      - "tasks"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Task"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new task"
      description: "Creates a new task"
      operationId: "createTask"
      tags:
      - "tasks"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update task by {id}"
      description: "Update task by {id}"
      operationId: "updateTaskByID"
      tags:
      - "tasks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tasks/{id}:
    x-swagger-router-controller: tasks
    delete:
      summary: "Deletes an existing task"
      description: "Deletes an existing task"
      operationId: "deleteTaskByID"
      tags:
      - "tasks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find task by {id}"
      description: "Find task by {id}"
      operationId: "getTaskByID"
      tags:
      - "tasks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/Task"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tasks/{id}/copy:
    x-swagger-router-controller: tasks
    post:
      summary: "Copy an existing task"
      description: "Copy an existing task"
      operationId: "copyTaskByID"
      tags:
      - "tasks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tasks/{id}/lock:
    x-swagger-router-controller: tasks
    delete:
      summary: "Unlock an existing task"
      description: "Unlock an existing task"
      operationId: "unlockTaskByID"
      tags:
      - "tasks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing task"
      description: "Lock an existing task"
      operationId: "lockTaskByID"
      tags:
      - "tasks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /tasks/{id}/print:
    x-swagger-router-controller: tasks
    post:
      summary: "Print an existing task"
      description: "Print an existing task"
      operationId: "printTaskByID"
      tags:
      - "tasks"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "task"
        schema:
          $ref: "#/definitions/Task"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws
  /userprofiles:
    x-swagger-router-controller: userprofiles
    get:
      summary: "Retrieves a list of all user profiles"
      description: "Retrieves a list of all user profiles"
      operationId: "listUserProfiles"
      tags:
      - "userprofiles"
      parameters:
      - name: "sort-by"
        in: "query"
        type: "string"
        required: false
      - name: "from"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - name: "count"
        in: "query"
        type: "integer"
        format: "int32"
        required: false
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/User_profile"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Creates a new user profile"
      description: "Creates a user profile card"
      operationId: "createUserProfile"
      tags:
      - "userprofiles"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    put:
      summary: "Update user profile by {id}"
      description: "Update user profile by {id}"
      operationId: "updateUserProfileByID"
      tags:
      - "userprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "409":
          $ref: "#/responses/DataConflict"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /userprofiles/{id}:
    x-swagger-router-controller: userprofiles
    delete:
      summary: "Deletes an existing user profile"
      description: "Deletes an existing user profile"
      operationId: "deleteUserProfileByID"
      tags:
      - "userprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    get:
      summary: "Find user profile by {id}"
      description: "Find financial user by {id}"
      operationId: "getUserProfileByID"
      tags:
      - "userprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "200":
          description: Resource found and being retrieved
          schema:
            $ref: "#/definitions/User_profile"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /userprofiles/{id}/copy:
    x-swagger-router-controller: userprofiles
    post:
      summary: "Copy an existing user profile"
      description: "Copy an existing user profile"
      operationId: "copyUserProfileByID"
      tags:
      - "userprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /userprofiles/{id}/lock:
    x-swagger-router-controller: userprofiles
    delete:
      summary: "Unlock an existing user profile"
      description: "Unlock an existing user profile"
      operationId: "unlockUserProfileByID"
      tags:
      - "userprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "204":
          $ref: "#/responses/Updated"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "404":
          $ref: "#/responses/NotFound"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

    post:
      summary: "Lock an existing user profile"
      description: "Lock an existing user profile"
      operationId: "lockUserProfileByID"
      tags:
      - "userprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

  /userprofiles/{id}/print:
    x-swagger-router-controller: userprofiles
    post:
      summary: "Print an existing user profile"
      description: "Print an existing user profile"
      operationId: "printUserProfileByID"
      tags:
      - "userprofiles"
      parameters:
      - name: "id"
        in: "path"
        type: "integer"
        format: "int32"
        required: true
      - in: "body"
        name: "user_profile"
        schema:
          $ref: "#/definitions/User_profile"
      responses:
        "201":
          $ref: "#/responses/Created"
        "400":
          $ref: "#/responses/BadRequest"
        "401":
          $ref: "#/responses/Unauthorized"
        "403":
          $ref: "#/responses/Forbidden"
        "422":
          $ref: "#/responses/UnprocessableEntity"
        "500":
          $ref: "#/responses/InternalServerError"
        "503":
          $ref: "#/responses/ServiceUnavailable"
      security:
      - enc-authorizer: []
      x-amazon-apigateway-integration:
        uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - Ref: AWS::Region
              - ":lambda:path/2015-03-31/functions/"
              - Fn::ImportValue: GreetingLambdaARN
              - "/invocations"
        responses:
          default:
            statusCode: "200"
        httpMethod: POST
        type: aws

# responses
responses:
  # 201 Created
  Created:
    description: Resource Created
    schema:
      $ref: "#/definitions/Success"
  # 204 Updated
  Updated:
    description: Resource Updated
    schema:
      $ref: "#/definitions/Success"
  # 400 Bad Request
  BadRequest:
    description: Bad Request
    schema:
      $ref: "#/definitions/Error"
  # 401 Unauthorized
  Unauthorized:
    description: Unauthorized
    schema:
      $ref: "#/definitions/Error"
  # 403 Forbidden
  Forbidden:
    description: Forbidden
    schema:
      $ref: "#/definitions/Error"
  # 404 Not Found
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: "#/definitions/Error"
  # 409 Data Conflict
  DataConflict:
    description: Data Conflict
    schema:
      $ref: "#/definitions/Error"
  # 422 Unprocessable Entity
  UnprocessableEntity:
    description: Unprocessable Entity
    schema:
      $ref: "#/definitions/Error"
  # 500 Internal Server Error
  InternalServerError:
    description: Internal Server Error
    schema:
      $ref: "#/definitions/Error"
  # 503 Service Unavailable
  ServiceUnavailable:
    description: Service Unavailable
    schema:
      $ref: "#/definitions/Error"


# definitions (Schema for Error + Schema for DataSets)
definitions:
  # Schema for Error response Body
  Error:
    type: object
    properties:
      message:
        type: string
      status:
        type: integer
        format: int32
    required:
      - error
      - status

  Success:
    type: "object"
    required:
    - "payload"
    - "status"
    properties:
      payload:
        type: "string"
      status:
        type: "integer"
        format: "int32"

  # Schema for DataSets
  Comment:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "comment"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      comment:
        type: "string"
      tags:
        type: "integer"
  Building_network:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "nature_of_relationship"
    - "building"
    - "contact_related"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      nature_of_relationship:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      building:
        $ref: "#/definitions/Building"
      contact_related:
        $ref: "#/definitions/Contact"
  User_profile:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "login_name"
    - "password"
    - "operational_status"
    - "security_status"
    - "contact"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      login_name:
        type: "string"
      password:
        type: "string"
      operational_status:
        type: "string"
      security_status:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      upload_picture:
        type: "string"
        format: "binary"
      contact:
        $ref: "#/definitions/Contact"
  Bank_account:
    type: "object"
    required:
    - "id"
    - "mandant_id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "iban"
    - "bank_account_holder"
    - "bank_details"
    properties:
      id:
        type: "integer"
        format: "int32"
      mandant_id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      iban:
        type: "string"
      bank_account_holder:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      bank_details:
        $ref: "#/definitions/Bank_details"
      sepa_standing_order:
        type: "array"
        items:
          $ref: "#/definitions/Sepa_standing_order"
      financial_profile:
        type: "array"
        items:
          $ref: "#/definitions/Financial_profile"
  Room:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "room_name"
    - "room_number"
    - "room_heating"
    - "room_temperature"
    - "room_area"
    - "room_volume"
    - "room_height"
    - "room_perimeter"
    - "number_of_air_exchange"
    - "zone"
    - "room_perimeter_base_plate"
    - "top_edge_soil"
    - "apartment"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      room_name:
        type: "string"
      room_number:
        type: "string"
      level_height:
        type: "integer"
      room_heating:
        type: "integer"
        format: "int32"
      room_temperature:
        type: "number"
        format: "float"
      room_area:
        type: "number"
        format: "float"
      room_volume:
        type: "number"
        format: "float"
      room_height:
        type: "number"
        format: "float"
      room_perimeter:
        type: "number"
        format: "float"
      number_of_air_exchange:
        type: "number"
        format: "float"
      zone:
        type: "string"
      room_perimeter_base_plate:
        type: "number"
        format: "float"
      top_edge_soil:
        type: "number"
        format: "float"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      apartment:
        $ref: "#/definitions/Apartment"
  Building:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "building_name"
    - "status"
    - "number_of_apartments"
    - "number_of_entrances"
    - "year_of_construction"
    - "heating_area_total"
    - "degree_of_airtightness"
    - "value_of_airtightness"
    - "shielding_coefficient"
    - "number_of_exposed_openings"
    - "heat_storage_capacity"
    - "climate_factor_type"
    - "climate_factor_value"
    - "norm_outside_temperature_dimension"
    - "corrected_outsite_temperatur"
    - "annual_average_outside_temperature"
    - "outside_temperature_correction_factor"
    - "lowering_time"
    - "heating_time"
    - "owner_since"
    - "building_owner"
    - "building_category"
    - "building_subcategory"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      building_name:
        type: "string"
      status:
        type: "string"
      number_of_apartments:
        type: "integer"
        format: "int32"
      number_of_entrances:
        type: "integer"
        format: "int32"
      year_of_construction:
        type: "integer"
        format: "int32"
      heating_area_total:
        type: "number"
        format: "float"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      address:
        type: "string"
      degree_of_airtightness:
        type: "number"
        format: "float"
      value_of_airtightness:
        type: "number"
        format: "float"
      shielding_coefficient:
        type: "number"
        format: "float"
      number_of_exposed_openings:
        type: "integer"
        format: "int32"
      heat_storage_capacity:
        type: "number"
        format: "float"
      climate_factor_type:
        type: "string"
      climate_factor_value:
        type: "number"
        format: "float"
      norm_outside_temperature_dimension:
        type: "number"
        format: "float"
      corrected_outsite_temperatur:
        type: "number"
        format: "float"
      corrected_norm_outside_temperatur:
        type: "number"
        format: "float"
      annual_average_outside_temperature:
        type: "number"
        format: "float"
      outside_temperature_correction_factor:
        type: "number"
        format: "float"
      lowering_time:
        type: "string"
      heating_time:
        type: "string"
      owner_since:
        type: "string"
        format: "date-time"
      project_id:
        type: "string"
      number_of_floors:
        type: "integer"
      building_owner:
        $ref: "#/definitions/Contact"
      building_category:
        $ref: "#/definitions/Category"
      building_subcategory:
        $ref: "#/definitions/Category"
      building_network:
        type: "array"
        items:
          $ref: "#/definitions/Building_network"
      point_of_delivery:
        type: "array"
        items:
          $ref: "#/definitions/Point_of_delivery"
      apartment_profile:
        type: "array"
        items:
          $ref: "#/definitions/Apartment_profile"
      entrance:
        type: "array"
        items:
          $ref: "#/definitions/Entrance"
  Roles:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "role_name"
    - "status"
    - "security_status"
    - "role_description"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      role_name:
        type: "string"
      status:
        type: "string"
      security_status:
        type: "string"
      role_description:
        type: "string"
  Bank_details:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "bic_swift"
    - "bank_name"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      bic_swift:
        type: "string"
      bank_name:
        type: "string"
      bank_account:
        type: "array"
        items:
          $ref: "#/definitions/Bank_account"
  Tag_manager:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "name"
    - "status"
    - "security_status"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      name:
        type: "string"
      status:
        type: "string"
      security_status:
        type: "string"
      description:
        type: "string"
  Category:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "category_name"
    - "category_value"
    - "category_status"
    - "category_security_status"
    - "parent_category"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      category_name:
        type: "string"
      category_value:
        type: "string"
      description:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      category_status:
        type: "string"
      category_security_status:
        type: "string"
      entity_name:
        type: "string"
      parent_category:
        $ref: "#/definitions/Category"
      organization:
        type: "array"
        items:
          $ref: "#/definitions/Organization"
      organization1:
        type: "array"
        items:
          $ref: "#/definitions/Organization"
      organization2:
        type: "array"
        items:
          $ref: "#/definitions/Organization"
      activity:
        type: "array"
        items:
          $ref: "#/definitions/Activity"
      task:
        type: "array"
        items:
          $ref: "#/definitions/Task"
      historic_energy_consumption:
        type: "array"
        items:
          $ref: "#/definitions/Historic_energy_consumption"
      building:
        type: "array"
        items:
          $ref: "#/definitions/Building"
      building1:
        type: "array"
        items:
          $ref: "#/definitions/Building"
      organization3:
        type: "array"
        items:
          $ref: "#/definitions/Organization"
      point_of_delivery:
        type: "array"
        items:
          $ref: "#/definitions/Point_of_delivery"
      contract:
        type: "array"
        items:
          $ref: "#/definitions/Contract"
      point_of_delivery1:
        type: "array"
        items:
          $ref: "#/definitions/Point_of_delivery"
      category:
        type: "array"
        items:
          $ref: "#/definitions/Category"
  Historic_energy_consumption:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "valid_from"
    - "valid_to"
    - "historic_energy_consumption"
    - "apartment_profile"
    - "category_id_energy_source"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      valid_from:
        type: "string"
        format: "date-time"
      valid_to:
        type: "string"
        format: "date-time"
      historic_energy_consumption:
        type: "number"
        format: "float"
      apartment_profile:
        $ref: "#/definitions/Apartment_profile"
      category_id_energy_source:
        $ref: "#/definitions/Category"
  Energy_meter:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "meter_factor"
    - "point_of_delivery"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      meter_factor:
        type: "integer"
        format: "int32"
      meter_function:
        type: "string"
      gateway_operator:
        $ref: "#/definitions/Organization"
      netzbetreiber:
        $ref: "#/definitions/Organization"
      messstellenbetreiber:
        $ref: "#/definitions/Organization"
      messdienstleister:
        $ref: "#/definitions/Organization"
      point_of_delivery:
        $ref: "#/definitions/Point_of_delivery"
  Favorite:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "folder"
    - "favorite_name"
    - "favorite_url"
    - "contact"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      folder:
        type: "string"
      favorite_name:
        type: "string"
      favorite_url:
        type: "string"
      comment_id:
        type: "integer"
      contact:
        $ref: "#/definitions/Contact"
  Credit_card:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "card_type"
    - "card_number"
    - "name_on_card"
    - "expiration_date"
    - "cvc_number"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      card_type:
        type: "string"
      card_number:
        type: "string"
      name_on_card:
        type: "string"
      expiration_date:
        type: "string"
        format: "date-time"
      cvc_number:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      financial_profile:
        type: "array"
        items:
          $ref: "#/definitions/Financial_profile"
  Bookmark:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "folder"
    - "bookmark_name"
    - "bookmark_url"
    - "contact"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      folder:
        type: "string"
      bookmark_name:
        type: "string"
      bookmark_url:
        type: "string"
      comment_id:
        type: "integer"
      contact:
        $ref: "#/definitions/Contact"
  Point_of_delivery:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "pod_name"
    - "operational_status"
    - "security_status"
    - "cost_centre"
    - "building"
    - "pod_category"
    - "pod_category1"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      pod_name:
        type: "string"
      operational_status:
        type: "string"
      security_status:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      malo_id:
        type: "string"
      cost_centre:
        type: "string"
      building:
        $ref: "#/definitions/Building"
      pod_category:
        $ref: "#/definitions/Category"
      pod_category1:
        $ref: "#/definitions/Category"
      point_of_delivery_network:
        type: "array"
        items:
          $ref: "#/definitions/Point_of_delivery_network"
      energy_meter:
        type: "array"
        items:
          $ref: "#/definitions/Energy_meter"
      contract:
        type: "array"
        items:
          $ref: "#/definitions/Contract"
      point_of_delivery_network1:
        type: "array"
        items:
          $ref: "#/definitions/Point_of_delivery_network"
  Contract:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "signed_on"
    - "signed_by"
    - "valid_from"
    - "valid_to"
    - "payment_schedule_interval"
    - "payment_schedule_day_of_payment"
    - "contract_partner_type"
    - "part_of_general_agreement"
    - "setting_fin_payment_type_id"
    - "financial_profile"
    - "contract_partner_contact"
    - "point_of_delivery"
    - "type"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      signed_on:
        type: "string"
        format: "date-time"
      signed_by:
        type: "integer"
        format: "int32"
      valid_from:
        type: "string"
        format: "date-time"
      valid_to:
        type: "string"
        format: "date-time"
      service_start:
        type: "string"
        format: "date-time"
      service_end:
        type: "string"
        format: "date-time"
      contract_term:
        type: "string"
        format: "date-time"
      notice_term:
        type: "string"
      notice_given_on:
        type: "string"
        format: "date-time"
      notice_given_to:
        type: "string"
        format: "date-time"
      payment_schedule_interval:
        type: "string"
      payment_schedule_day_of_payment:
        type: "string"
        format: "date-time"
      standing_order_valid_from:
        type: "string"
        format: "date-time"
      standing_order_valid_to:
        type: "string"
        format: "date-time"
      amount_prepayed:
        type: "number"
        format: "float"
      contract_partner_type:
        type: "string"
      part_of_general_agreement:
        type: "integer"
        format: "int32"
      point_of_delivery_list:
        type: "integer"
      payment_schedule_day_due_type:
        type: "string"
      notice_term_unit:
        type: "string"
      termination_date:
        type: "string"
      contract_terminated:
        type: "boolean"
      tax_status:
        type: "string"
      commercial_chargeable_demand:
        type: "integer"
      commercial_chargeable_demand_unit:
        type: "string"
      automatic_contract_extension:
        type: "integer"
      automatic_contract_extension_unit:
        type: "string"
      sepa_standing_order_sepa_mode:
        type: "string"
      setting_fin_payment_type_id:
        type: "integer"
        format: "int32"
      sepa_standing_order:
        $ref: "#/definitions/Sepa_standing_order"
      financial_profile:
        $ref: "#/definitions/Financial_profile"
      contract_partner_contact:
        $ref: "#/definitions/Contact"
      point_of_delivery:
        $ref: "#/definitions/Point_of_delivery"
      contract:
        $ref: "#/definitions/Contract"
      type:
        $ref: "#/definitions/Category"
      contract1:
        type: "array"
        items:
          $ref: "#/definitions/Contract"
  Organization:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "name_of_organization"
    - "legal_form"
    - "registry_date"
    - "registered_in"
    - "place_of_incorporation"
    - "exchange_listed"
    - "status"
    - "tax_number"
    - "sector"
    - "industry_category"
    - "industry_subcategory"
    - "industry_group"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      name_of_organization:
        type: "string"
      legal_form:
        type: "string"
      registry_date:
        type: "string"
        format: "date-time"
      registered_in:
        type: "string"
      place_of_incorporation:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      main_activity_business:
        type: "string"
      majority_shareholder:
        type: "string"
      ceo_managing_director:
        type: "string"
      chairman_of_board_of_directors:
        type: "string"
      exchange_listed:
        type: "string"
      status:
        type: "string"
      address:
        type: "string"
      communication:
        type: "integer"
      tax_number:
        type: "string"
      sector:
        $ref: "#/definitions/Category"
      industry_category:
        $ref: "#/definitions/Category"
      industry_subcategory:
        $ref: "#/definitions/Category"
      industry_group:
        $ref: "#/definitions/Category"
      contact:
        type: "array"
        items:
          $ref: "#/definitions/Contact"
      organization_identifier:
        type: "array"
        items:
          $ref: "#/definitions/Organization_identifier"
      energy_meter:
        type: "array"
        items:
          $ref: "#/definitions/Energy_meter"
      energy_meter1:
        type: "array"
        items:
          $ref: "#/definitions/Energy_meter"
      energy_meter2:
        type: "array"
        items:
          $ref: "#/definitions/Energy_meter"
      energy_meter3:
        type: "array"
        items:
          $ref: "#/definitions/Energy_meter"
      financial_profile:
        type: "array"
        items:
          $ref: "#/definitions/Financial_profile"
      point_of_delivery_network:
        type: "array"
        items:
          $ref: "#/definitions/Point_of_delivery_network"
  Organization_identifier:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "market_function"
    - "market_function_id"
    - "organization"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      market_function:
        type: "string"
      market_function_id:
        type: "string"
      organization:
        $ref: "#/definitions/Organization"
  Contact_network:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "nature_of_relationship"
    - "type_of_network_member"
    - "contact"
    - "contact_related"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      nature_of_relationship:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      type_of_network_member:
        type: "string"
      contact:
        $ref: "#/definitions/Contact"
      contact_related:
        $ref: "#/definitions/Contact"
      verified_by:
        $ref: "#/definitions/Contact"
  Task:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "due_date"
    - "description"
    - "flagged"
    - "create ContactRequest"
    - "category"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      due_date:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      select_tags:
        type: "integer"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      flagged:
        type: "integer"
        format: "int32"
      create ContactRequest:
        $ref: "#/definitions/Contact"
      category:
        $ref: "#/definitions/Category"
  Address:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "zip_code"
    - "place"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      street:
        type: "string"
      street_number:
        type: "string"
      address_addon_1:
        type: "string"
      address_addon_2:
        type: "string"
      postbox:
        type: "string"
      prefix:
        type: "string"
      zip_code:
        type: "string"
      place:
        type: "string"
      state:
        type: "string"
      country:
        type: "string"
  Apartment_profile:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "contact_id"
    - "tenant_since"
    - "air_change_type"
    - "drinking_water_type"
    - "occupancy_type"
    - "building"
    - "apartment"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      contact_id:
        type: "integer"
        format: "int32"
      tenant_since:
        type: "string"
        format: "date-time"
      tenant_to:
        type: "string"
        format: "date-time"
      air_change_type:
        type: "string"
      drinking_water_type:
        type: "string"
      occupancy_type:
        type: "string"
      communication_interface:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      building:
        $ref: "#/definitions/Building"
      apartment:
        $ref: "#/definitions/Apartment"
      historic_energy_consumption:
        type: "array"
        items:
          $ref: "#/definitions/Historic_energy_consumption"
  Status_manager:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "status_name"
    - "status_description"
    - "category"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      status_name:
        type: "string"
      status_description:
        type: "string"
      category:
        type: "string"
  Entrance:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "building"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      entrance_name:
        type: "string"
      entrance_description:
        type: "string"
      address:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      building:
        $ref: "#/definitions/Building"
      apartment:
        type: "array"
        items:
          $ref: "#/definitions/Apartment"
  Financial_profile:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "origin"
    - "payment_category"
    - "origin1"
    - "payment"
    - "payment1"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      origin:
        $ref: "#/definitions/Contact"
      payment_category:
        type: "string"
      origin1:
        $ref: "#/definitions/Organization"
      payment:
        $ref: "#/definitions/Bank_account"
      payment1:
        $ref: "#/definitions/Credit_card"
      contract:
        type: "array"
        items:
          $ref: "#/definitions/Contract"
  Activity:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "date_of_activity"
    - "create ContactRequest"
    - "category"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      date_of_activity:
        type: "string"
        format: "date-time"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      create ContactRequest:
        $ref: "#/definitions/Contact"
      category:
        $ref: "#/definitions/Category"
  Apartment:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "apartment_name"
    - "apartment_description"
    - "entrance"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      apartment_name:
        type: "string"
      apartment_description:
        type: "string"
      roomlevel:
        type: "integer"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      entrance:
        $ref: "#/definitions/Entrance"
      apartment_profile:
        type: "array"
        items:
          $ref: "#/definitions/Apartment_profile"
      room:
        type: "array"
        items:
          $ref: "#/definitions/Room"
  Group_manager:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "group_name"
    - "status"
    - "security_status"
    - "group_description"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      group_name:
        type: "string"
      status:
        type: "string"
      security_status:
        type: "string"
      group_description:
        type: "string"
  Contact:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "title"
    - "first_name"
    - "surname"
    - "birthday"
    - "gender"
    - "marital_status"
    - "political_orientation"
    - "religion"
    - "salutation"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      title:
        type: "string"
      title_add_on:
        type: "string"
      first_name:
        type: "string"
      middle_name:
        type: "string"
      surname:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      operational_status:
        type: "string"
      security_status:
        type: "string"
      rating_of_contact:
        type: "integer"
      quality_of_relationship:
        type: "integer"
      birthday:
        type: "string"
        format: "date-time"
      gender:
        type: "string"
      marital_status:
        type: "string"
      political_orientation:
        type: "string"
      religion:
        type: "string"
      hobby:
        type: "integer"
      member_of_organization_since:
        type: "string"
        format: "date-time"
      member_of_organization_till:
        type: "string"
        format: "date-time"
      function_in_organization:
        type: "string"
      data_completed_average:
        type: "integer"
      notification:
        type: "integer"
      address:
        type: "string"
      communication:
        type: "integer"
      salutation:
        type: "string"
      name_of_organization:
        $ref: "#/definitions/Organization"
      superior:
        $ref: "#/definitions/Contact"
      building:
        type: "array"
        items:
          $ref: "#/definitions/Building"
      building_network:
        type: "array"
        items:
          $ref: "#/definitions/Building_network"
      contact:
        type: "array"
        items:
          $ref: "#/definitions/Contact"
      contact_network:
        type: "array"
        items:
          $ref: "#/definitions/Contact_network"
      contact_network1:
        type: "array"
        items:
          $ref: "#/definitions/Contact_network"
      contact_network2:
        type: "array"
        items:
          $ref: "#/definitions/Contact_network"
      point_of_delivery_network:
        type: "array"
        items:
          $ref: "#/definitions/Point_of_delivery_network"
      activity:
        type: "array"
        items:
          $ref: "#/definitions/Activity"
      financial_profile:
        type: "array"
        items:
          $ref: "#/definitions/Financial_profile"
      task:
        type: "array"
        items:
          $ref: "#/definitions/Task"
      digital_user_profile:
        type: "array"
        items:
          $ref: "#/definitions/User_profile"
      contract:
        type: "array"
        items:
          $ref: "#/definitions/Contract"
      point_of_delivery_network1:
        type: "array"
        items:
          $ref: "#/definitions/Point_of_delivery_network"
      bookmark:
        type: "array"
        items:
          $ref: "#/definitions/Bookmark"
      favorite:
        type: "array"
        items:
          $ref: "#/definitions/Favorite"
  Sepa_standing_order:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "valid_from"
    - "valid_to"
    - "mandat_reference"
    - "sepa_mode"
    - "bank_account"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      valid_from:
        type: "string"
        format: "date"
      valid_to:
        type: "string"
        format: "date"
      mandat_reference:
        type: "string"
      sepa_mode:
        type: "string"
      disabled:
        type: "boolean"
      suffix:
        type: "string"
      bank_account:
        $ref: "#/definitions/Bank_account"
      contract:
        type: "array"
        items:
          $ref: "#/definitions/Contract"
  Point_of_delivery_network:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "nature_of_relationship"
    - "point_of_delivery"
    - "verified_by"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      nature_of_relationship:
        type: "string"
      comment_id:
        type: "integer"
      attachment_id:
        type: "integer"
      point_of_delivery:
        $ref: "#/definitions/Point_of_delivery"
      contact_related:
        $ref: "#/definitions/Contact"
      organization_related:
        $ref: "#/definitions/Organization"
      point_of_delivery_related:
        $ref: "#/definitions/Point_of_delivery"
      verified_by:
        $ref: "#/definitions/Contact"
  Attachment:
    type: "object"
    required:
    - "id"
    - "created_contact_id"
    - "created_date"
    - "last_modified_contact_id"
    - "last_modified_date"
    - "filename"
    - "location"
    properties:
      id:
        type: "integer"
        format: "int32"
      created_contact_id:
        type: "integer"
        format: "int32"
      created_date:
        type: "string"
        format: "date-time"
      last_modified_contact_id:
        type: "integer"
        format: "int32"
      last_modified_date:
        type: "string"
        format: "date-time"
      comment_id:
        type: "integer"
      filename:
        type: "string"
      location:
        type: "string"
      tags:
        type: "integer"
      file:
        type: "string"
        format: "binary"